import os
import random
import logging
import telebot
from telebot import types
from db import UserDatabase
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
db = UserDatabase()

# –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–≤–æ–∫
BET_AMOUNTS = [10, 50, 100, 500, 1000]
STARTING_BALANCE = 1000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_BOT_TOKEN.")
    
bot = telebot.TeleBot(TOKEN if TOKEN else "placeholder_for_error_prevention")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not db.user_exists(user_id):
        db.add_user(user_id, STARTING_BALANCE)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n"
        "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–û—Ä—ë–ª –∏ –†–µ—à–∫–∞¬ª*\n\n"
        "üîπ *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:*\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /flip, —á—Ç–æ–±—ã –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\n"
        "- –î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ ¬´–û—Ä–ª–∞¬ª –∏–ª–∏ ¬´–†–µ—à–∫—É¬ª\n"
        "- –í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã\n\n"
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{db.get_balance(user_id)}* –±–∞–ª–ª–æ–≤\n\n"
        "üéØ *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/flip - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É –∏ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É\n"
        "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    
    bot.send_message(user_id, welcome_message, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    
    help_text = (
        "üéÆ *–ò–≥—Ä–∞ ¬´–û—Ä—ë–ª –∏ –†–µ—à–∫–∞¬ª* - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/flip - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É –∏ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É\n"
        "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üîπ *–ö–∞–∫ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏:*\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /flip\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã (–û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞)\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n"
        "4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!\n\n"
        "üí∞ –ï—Å–ª–∏ –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–µ—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ –¥–≤–∞ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã.\n"
        "‚ùó –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ - –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É.\n\n"
        "–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üçÄ"
    )
    
    bot.send_message(user_id, help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
@bot.message_handler(commands=['balance'])
def balance(message):
    user_id = message.from_user.id
    
    if not db.user_exists(user_id):
        db.add_user(user_id, STARTING_BALANCE)
    
    balance = db.get_balance(user_id)
    
    bot.send_message(
        user_id,
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{balance}* –±–∞–ª–ª–æ–≤",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /flip
@bot.message_handler(commands=['flip'])
def flip(message):
    user_id = message.from_user.id
    
    if not db.user_exists(user_id):
        db.add_user(user_id, STARTING_BALANCE)
    
    balance = db.get_balance(user_id)
    
    if balance <= 0:
        bot.send_message(
            user_id,
            "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–∞–ª–ª—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –±–∞–ª–ª—ã."
        )
        db.update_balance(user_id, STARTING_BALANCE)
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    button_heads = types.InlineKeyboardButton("ü¶Ö –û—Ä—ë–ª", callback_data="choice_heads")
    button_tails = types.InlineKeyboardButton("üëë –†–µ—à–∫–∞", callback_data="choice_tails")
    markup.add(button_heads, button_tails)
    
    bot.send_message(
        user_id,
        "üîÑ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –º–æ–Ω–µ—Ç—ã:*",
        reply_markup=markup,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    
    if call.data.startswith("choice_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–Ω–µ—Ç—ã
        handle_choice(call)
    elif call.data.startswith("bet_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏
        handle_bet(call)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–Ω–µ—Ç—ã
def handle_choice(call):
    user_id = call.from_user.id
    user_choice = call.data.split("_")[1]  # heads –∏–ª–∏ tails
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
    markup = types.InlineKeyboardMarkup(row_width=3)
    
    balance = db.get_balance(user_id)
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å
    for amount in BET_AMOUNTS:
        if amount <= balance:
            buttons.append(types.InlineKeyboardButton(
                f"{amount}", 
                callback_data=f"bet_{user_choice}_{amount}"
            ))
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–ª–æ –±–∞–ª–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å
    if not buttons:
        buttons = [types.InlineKeyboardButton(
            f"{balance}", 
            callback_data=f"bet_{user_choice}_{balance}"
        )]
    
    markup.add(*buttons)
    
    choice_text = "ü¶Ö –û—Ä—ë–ª" if user_choice == "heads" else "üëë –†–µ—à–∫–∞"
    
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{choice_text}*\n\nüí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=markup,
        parse_mode="Markdown"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç–∫–∏
def handle_bet(call):
    user_id = call.from_user.id
    data_parts = call.data.split("_")
    user_choice = data_parts[1]  # heads –∏–ª–∏ tails
    bet_amount = int(data_parts[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = db.get_balance(user_id)
    
    if bet_amount > balance:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!"
        )
        return
    
    # –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É
    result = random.choice(["heads", "tails"])
    result_text = "ü¶Ö –û—Ä—ë–ª" if result == "heads" else "üëë –†–µ—à–∫–∞"
    choice_text = "ü¶Ö –û—Ä—ë–ª" if user_choice == "heads" else "üëë –†–µ—à–∫–∞"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à
    if result == user_choice:
        # –í—ã–∏–≥—Ä—ã—à
        win_amount = bet_amount
        new_balance = balance + win_amount
        db.update_balance(user_id, new_balance)
        
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=(
                f"üé≤ *–†–µ–∑—É–ª—å—Ç–∞—Ç:* {result_text}\n\n"
                f"üéØ –í–∞—à –≤—ã–±–æ—Ä: {choice_text}\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount}\n\n"
                f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –±–∞–ª–ª–æ–≤!*\n\n"
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{new_balance}* –±–∞–ª–ª–æ–≤\n\n"
                f"–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑? –í–≤–µ–¥–∏—Ç–µ /flip"
            ),
            parse_mode="Markdown"
        )
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        new_balance = balance - bet_amount
        db.update_balance(user_id, new_balance)
        
        bot.edit_message_text(
            chat_id=user_id,
            message_id=call.message.message_id,
            text=(
                f"üé≤ *–†–µ–∑—É–ª—å—Ç–∞—Ç:* {result_text}\n\n"
                f"üéØ –í–∞—à –≤—ã–±–æ—Ä: {choice_text}\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount}\n\n"
                f"üòî *–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet_amount} –±–∞–ª–ª–æ–≤*\n\n"
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{new_balance}* –±–∞–ª–ª–æ–≤\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –í–≤–µ–¥–∏—Ç–µ /flip"
            ),
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def unknown(message):
    bot.reply_to(
        message,
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

def main() -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()

if __name__ == "__main__":
    main()
